<style>
{{ linkz_font | font_face }}

a.linkz {
    position: relative;
}
.linkz-popover {
  position: absolute;
  left: 5px;
  bottom:100%;
  z-index: 99999999;
}

.linkz-popover .linkz-popover-content {
    display: block;
    background-color: #f9f9f9;
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
}
.linkz-popover:after {
    content: '';
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-bottom: 5px solid black;
    display: block;
    width: 5px;
    height: 5px;
    margin: auto;
}
.linkz-loader {
  animation: linkzrotate 2s linear infinite;
  width: 50px;
  height: 50px;
}

.linkz-loader-circle {
  stroke: #555;
  stroke-dasharray: 30;
  stroke-dashoffset: 0;
  animation: linkzdash 1.5s ease-in-out infinite;
}

@keyframes linkzrotate {
  100% {
    transform: rotate(360deg);
  }
}

@keyframes linkzdash {
  0% {
    stroke-dashoffset: 30;
  }
  50% {
    stroke-dashoffset: 0;
  }
  100% {
    stroke-dashoffset: 30;
  }
}
.linkz-top {
    display: flex;
    align-items: flex-start;
    margin-bottom: 10px;
}
.linkz-top img {
    width: 20px;
    margin-right: 10px;
}
.linkz-title {
    font-size: 13px;
    font-weight: bold;
    text-align:initial;
}
.linkz-website {
    font-size: 12px;
    text-align:initial;
}
.linkz-image-continer {
    margin: 10px 0 12px 0;
    background-color: rgba(135,135,135,0.2);
    border-radius: 4px;
    height: 141px;
    min-width: 260px;
    overflow: hidden;
    position: relative;
}
.linkz-image {
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
    height: 100%;
    width: 100%;
    display: block !important;
}
.linkz-description {
    font-size: 12px;
}
.linkz-hide{
  display:none;
}
</style>
{% assign linkz_font = block.settings.textFont %}
<script>
async function getThirdPartyUrls() {
  const currentHostname = window.location.hostname;
  const anchors = document.getElementsByTagName('a');

  for (let i = 0; i < anchors.length; i++) {
    const anchor = anchors[i];
    if(!anchor.href){
      continue;
    }
    const url = new URL(anchor.href);

    if (url.hostname !== currentHostname) {
      anchor.classList.add('linkz');
      anchor.addEventListener('mouseover', handleMouseOveLinkz);
      anchor.addEventListener('mouseout', handleMouseOutLinkz);
    }
  }
  return true;
}

// Event handler for mouseover
async function handleMouseOveLinkz(event) {
  const element = event.target;
  if(element.querySelector('.linkz-popover-content')){
    element.querySelector('.linkz-popover').classList.remove('linkz-hide');
    return false;
  }

  const htmlContent = `<div class="linkz-popover">
    <div class="linkz-popover-content">
      <svg class="linkz-loader" viewBox="0 0 50 50">
        <circle class="linkz-loader-circle" cx="25" cy="25" r="20" fill="none" stroke-width="4"></circle>
      </svg>
    </div>
  </div>`;
  element.insertAdjacentHTML('beforeend', htmlContent);
  var unfurlLink = await fetch('/tools/meta?url='+encodeURIComponent(element.href));
  var unfurlLinkMeta = await unfurlLink.json();
  if(unfurlLinkMeta.ok && Object.keys(unfurlLinkMeta.attachments).length){
    unfurlLinkMeta = Object.values(unfurlLinkMeta.attachments)[0];
    if(unfurlLinkMeta.text){
      var txt = unfurlLinkMeta.text.length > 100 ? unfurlLinkMeta.text.substr(0,100)+ '...' : unfurlLinkMeta.text;
    }else{
      var txt = unfurlLinkMeta.title
    }

    if(unfurlLinkMeta.image_url){
      var image_url = unfurlLinkMeta.image_url;
    }else if(unfurlLinkMeta.thumb_url){
      var image_url = unfurlLinkMeta.thumb_url;
    }else{
      var image_url = '';
    }
    var uri = new URL(unfurlLinkMeta.original_url);
    var content = `<div class="linkz-popover-content">
      <div class="linkz-top">
        <img src="${unfurlLinkMeta.service_icon}">
        <div class="linkz-main">
            <div class="linkz-title" style="color:{{ block.settings.textColor }}; font-family: {{ linkz_font.family }}, {{ linkz_font.fallback_families }};">${unfurlLinkMeta.title} ${unfurlLinkMeta.author_name ? '-'+unfurlLinkMeta.author_name : ''}</div>
            <div class="linkz-website" style="font-family: {{ linkz_font.family }}, {{ linkz_font.fallback_families }};">${uri.hostname}</div>
        </div>
      </div>
      <div class="linkz-image-continer">
        <div class="linkz-image" style="background-image:url(${image_url})"></div>
      </div>
      <div class="linkz-description" style="color:{{ block.settings.textColor }}; font-family: {{ linkz_font.family }}, {{ linkz_font.fallback_families }};">${txt}</div>
    </div>`;
    element.querySelector('.linkz-popover').innerHTML = content;
  }else{
    element.querySelector('.linkz-popover').innerHTML = `<div class="linkz-popover-content"><b>No Preview</b></div>`;
  }
  
}

// Event handler for mouseout
function handleMouseOutLinkz(event) {
  const element = event.target;
  element.querySelector('.linkz-popover').classList.add('linkz-hide');
}

getThirdPartyUrls();
</script>

{% schema %}
  {
    "name": "Linkz App",
    "target": "body",
    "settings": [{
          "label": "Color", "id": "textColor", "type": "color", "default": "#000000"
        },
        {
          "type": "font_picker",
          "id": "textFont",
          "label": "Heading font",
          "default": "helvetica_n4"
        }
        ]
  }
{% endschema %}